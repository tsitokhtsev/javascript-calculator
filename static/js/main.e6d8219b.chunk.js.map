{"version":3,"sources":["App.js","index.js"],"names":["numbers","operations","App","renderedButtons","obj","type","Object","keys","map","item","className","id","style","gridArea","onClick","e","handleClick","useState","currentNumber","setCurrentNumber","previousNumber","setPreviousNumber","expression","setExpression","isOperation","value","values","indexOf","target","innerHTML","includes","slice","answer","Math","round","eval","length","replace","clear","undefined","ReactDOM","render","document","getElementById"],"mappings":"g4BAIMA,QAAU,CACf,KAAQ,IACR,IAAO,IACP,IAAO,IACP,MAAS,IACT,KAAQ,IACR,KAAQ,IACR,IAAO,IACP,MAAS,IACT,MAAS,IACT,KAAQ,KAGHC,WAAa,CAClB,IAAO,IACP,SAAY,IACZ,SAAY,IACZ,OAAU,KAGLC,IAAM,SAANA,MACL,IAAMC,gBAAkB,SAACC,EAAKC,GAC7B,OAAOC,OAAOC,KAAKH,GAAKI,KAAI,SAAAC,GAAI,OAC/B,qEAECC,UAAS,iBAAYL,GACrBM,GAAIF,EACJG,MAAO,CAAEC,SAAUJ,GACnBK,QAAS,SAAAC,GAAC,OAAIC,YAAYD,IAL3B,SAOEX,EAAIK,IANAA,OAWR,UAA0CQ,oDAAS,KAAnD,qKAAOC,cAAP,cAAsBC,iBAAtB,cACA,WAA4CF,sDAA5C,sKAAOG,eAAP,cAAuBC,kBAAvB,cACA,WAAoCJ,oDAAS,KAA7C,sKAAOK,WAAP,cAAmBC,cAAnB,cAEMC,YAAc,SAAAC,GACnB,OAAqD,IAA9CnB,OAAOoB,OAAOzB,YAAY0B,QAAQF,IAGpCT,YAAc,SAAdA,YAAcD,GACnB,IAAMU,MAAQV,EAAEa,OAAOC,UAEvB,GAAc,MAAVJ,MACEP,cAAcY,SAAS,MAASN,YAAYN,iBAChDC,iBAAiBD,cAAgBO,OACjCF,cAAcD,WAAaG,aAEtB,GAAc,MAAVA,MAAe,CACzB,GAAID,YAAYN,eACfK,cAAcD,WAAWS,MAAM,GAAI,GAAKN,MAAQL,gBAChDD,iBAAiBC,oBACX,CACN,IAAIY,OAASC,KAAKC,MAAM,KAAgBC,KAAKb,aAAe,KAC5DC,cAAcD,WAAaG,MAAQO,QACnCb,iBAAiBa,QAElBX,kBAAkBI,YACRD,YAAYC,QAC0B,MAA5CP,cAAcA,cAAckB,OAAS,IAAcZ,YAAYN,eAEjEK,cADa,MAAVE,MACWH,WAAWe,QAAQ,WAAYZ,OAE/BH,WAAaG,OAG5BF,cAD6B,MAAnBH,eACIF,cAAgBO,MAEhBH,WAAaG,OAE5BJ,kBAAkBH,eAClBC,iBAAiBM,SAEbD,YAAYN,gBAAkBI,WAAWQ,SAAS,KACrDX,iBAAiBM,OAEjBN,iBAAmC,MAAlBD,cAAwBO,MAAQP,cAAgBO,OAElEF,cAAcD,WAAWQ,SAAS,KAC/BL,MACkB,MAAlBP,eAAwC,MAAfI,WACxBA,WAAWS,MAAM,GAAI,GAAKN,MAC1BH,WAAaG,SAIba,MAAQ,WACbnB,iBAAiB,KACjBE,uBAAkBkB,GAClBhB,cAAc,MAGf,OACC,mEAAKZ,GAAG,aAAR,UACC,mEAAKA,GAAG,SAAR,UACC,mEAAMA,GAAG,aAAT,SAAuBW,aACvB,mEAAMX,GAAG,UAAT,SAAoBO,mBAErB,mEAAKP,GAAG,UAAR,UACC,qEAAQD,UAAU,SAASC,GAAG,QAAQG,QAAS,kBAAMwB,SAArD,gBACCnC,gBAAgBH,QAAS,UACzBG,gBAAgBF,WAAY,aAC7B,qEAAQS,UAAU,SAASC,GAAG,UAAUG,QAAS,SAAAC,GAAC,OAAIC,YAAYD,IAAlE,eACA,qEAAQL,UAAU,mBAAmBC,GAAG,SAASG,QAAS,SAAAC,GAAC,OAAIC,YAAYD,IAA3E,sBAMWb,2B,+BCpHf,sDAMAsC,IAASC,OACP,cAAC,IAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e6d8219b.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nimport './App.css'\n\nconst numbers = {\n\t'zero': '0',\n\t'one': '1',\n\t'two': '2',\n\t'three': '3',\n\t'four': '4',\n\t'five': '5',\n\t'six': '6',\n\t'seven': '7',\n\t'eight': '8',\n\t'nine': '9'\n}\n\nconst operations = {\n\t'add': '+',\n\t'subtract': '-',\n\t'multiply': '*',\n\t'divide': '/'\n}\n\nconst App = () => {\n\tconst renderedButtons = (obj, type) => {\n\t\treturn Object.keys(obj).map(item =>\n\t\t\t<button\n\t\t\t\tkey={item}\n\t\t\t\tclassName={`button ${type}`}\n\t\t\t\tid={item}\n\t\t\t\tstyle={{ gridArea: item }}\n\t\t\t\tonClick={e => handleClick(e)}\n\t\t\t>\n\t\t\t\t{obj[item]}\n\t\t\t</button>\n\t\t)\n\t}\n\n\tconst [currentNumber, setCurrentNumber] = useState('0')\n\tconst [previousNumber, setPreviousNumber] = useState()\n\tconst [expression, setExpression] = useState('0')\n\n\tconst isOperation = value => {\n\t\treturn Object.values(operations).indexOf(value) !== -1\n\t}\n\n\tconst handleClick = e => {\n\t\tconst value = e.target.innerHTML\n\n\t\tif (value === '.') {\n\t\t\tif (!currentNumber.includes('.') && !isOperation(currentNumber)) {\n\t\t\t\tsetCurrentNumber(currentNumber + value)\n\t\t\t\tsetExpression(expression + value)\n\t\t\t}\n\t\t} else if (value === '=') {\n\t\t\tif (isOperation(currentNumber)) {\n\t\t\t\tsetExpression(expression.slice(0, -1) + value + previousNumber)\n\t\t\t\tsetCurrentNumber(previousNumber)\n\t\t\t} else {\n\t\t\t\tlet answer = Math.round(1000000000000 * eval(expression)) / 1000000000000\n\t\t\t\tsetExpression(expression + value + answer)\n\t\t\t\tsetCurrentNumber(answer)\n\t\t\t}\n\t\t\tsetPreviousNumber(value)\n\t\t} else if (isOperation(value)) {\n\t\t\tif (currentNumber[currentNumber.length - 1] === '.' || isOperation(currentNumber)) {\n\t\t\t\tif (value !== '-') {\n\t\t\t\t\tsetExpression(expression.replace(/[+*/]-?$/, value))\n\t\t\t\t} else {\n\t\t\t\t\tsetExpression(expression + value)\n\t\t\t\t}\n\t\t\t} else if (previousNumber === '=') {\n\t\t\t\tsetExpression(currentNumber + value)\n\t\t\t} else {\n\t\t\t\tsetExpression(expression + value)\n\t\t\t}\n\t\t\tsetPreviousNumber(currentNumber)\n\t\t\tsetCurrentNumber(value)\n\t\t} else {\n\t\t\tif (isOperation(currentNumber) || expression.includes('=')) {\n\t\t\t\tsetCurrentNumber(value)\n\t\t\t} else {\n\t\t\t\tsetCurrentNumber(currentNumber === '0' ? value : currentNumber + value)\n\t\t\t}\n\t\t\tsetExpression(expression.includes('=')\n\t\t\t\t? value\n\t\t\t\t: currentNumber === '0' || expression === '0'\n\t\t\t\t\t? expression.slice(0, -1) + value\n\t\t\t\t\t: expression + value)\n\t\t}\n\t}\n\n\tconst clear = () => {\n\t\tsetCurrentNumber('0')\n\t\tsetPreviousNumber(undefined)\n\t\tsetExpression('0')\n\t}\n\n\treturn (\n\t\t<div id=\"calculator\" >\n\t\t\t<div id=\"screen\">\n\t\t\t\t<span id=\"expression\">{expression}</span>\n\t\t\t\t<span id=\"display\">{currentNumber}</span>\n\t\t\t</div>\n\t\t\t<div id=\"buttons\">\n\t\t\t\t<button className=\"button\" id=\"clear\" onClick={() => clear()}>ac</button>\n\t\t\t\t{renderedButtons(numbers, 'number')}\n\t\t\t\t{renderedButtons(operations, 'operation')}\n\t\t\t\t<button className=\"button\" id=\"decimal\" onClick={e => handleClick(e)}>.</button>\n\t\t\t\t<button className=\"button operation\" id=\"equals\" onClick={e => handleClick(e)}>=</button>\n\t\t\t</div>\n\t\t</div >\n\t)\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}